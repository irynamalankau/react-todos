{"version":3,"sources":["hooks/useLocalStorageState.js","hooks/useLocalStorageReducer.js","reducers/todo.reducer.js","contexts/todos.context.js","hooks/useInputState.js","EditTodoForm.js","hooks/useToggleState.js","Todo.js","TodoList.js","TodoForm.js","Footer.js","TodoApp.js","App.js","serviceWorker.js","index.js"],"names":["useLocalStorageState","useLocalStorageReducer","key","defaultVal","reducer","_useReducer","useReducer","value","JSON","parse","window","localStorage","getItem","String","e","_useReducer2","Object","slicedToArray","state","dispatch","useEffect","setItem","stringify","action","type","concat","toConsumableArray","id","uuid","task","completed","filter","todo","map","objectSpread","newTask","defaultTodos","TodosContext","createContext","DispatchContext","TodosProvider","props","_useLocalStorageReduc","todoReducer","_useLocalStorageReduc2","todos","react_default","a","createElement","Provider","children","useInputState","initialVal","_useState","useState","_useState2","setValue","target","EditTodoForm","_ref","toggleEditForm","_useInputState","_useInputState2","handleChange","reset","useContext","onSubmit","preventDefault","style","marginLeft","width","TextField","margin","onChange","fullWidth","autoFocus","useToggle","arguments","length","undefined","setState","memo","_useToggleState","useToggleState","_useToggleState2","isEditing","toggleEditing","ListItem","height","src_EditTodoForm","Fragment","Checkbox","checked","onClick","ListItemSecondaryAction","IconButton","aria-label","Delete_default","Edit_default","TodoList","Paper","List","i","src_Todo","Divider","TodoForm","padding","label","FooterContainer","styled","div","_templateObject","Footer","Typography","variant","TodoApp","backgroundColor","elevation","AppBar","color","position","Toolbar","Grid","container","justify","marginTop","item","xs","md","lg","src_TodoForm","src_TodoList","src_Footer","App","src_TodoApp","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e64eef92.chunk.js","sourcesContent":["import {useState, useEffect} from 'react';\n\nfunction useLocalStorageState(key, defaultVal){\n    //make piece os state based off of value in localStorage\n    const [state, setState] = useState(()=>{\n        let val;\n        try{\n            val = JSON.parse(window.localStorage.getItem(key) || String(defaultVal));\n        }\n        catch (e){\n            val = defaultVal;\n        }\n        return val;\n    });\n    //use useEffect to update localStorage when state changes\n    useEffect(()=>{\n        window.localStorage.setItem(key, JSON.stringify(state));\n    }, [state]);\n\n    return [state, setState];\n}\n\nexport default useLocalStorageState;","import {useEffect, useReducer} from 'react';\n\nfunction useLocalStorageReducer(key, defaultVal, reducer){\n    //make piece os state based off of value in localStorage\n    const [state, dispatch] = useReducer(reducer, defaultVal, ()=>{\n        let value;\n        try{\n            value = JSON.parse(window.localStorage.getItem(key) || String(defaultVal));\n        }\n        catch (e){\n            value = defaultVal;\n        }\n        return value;\n    });\n    //use useEffect to update localStorage when state changes\n    useEffect(()=>{\n        window.localStorage.setItem(key, JSON.stringify(state));\n    }, [state]);\n\n    return [state, dispatch];\n}\n\nexport default useLocalStorageReducer;","import uuid from 'uuid/v1';\n\n\nconst reducer = (state, action)=>{\n    switch(action.type){\n        case \"ADD\":\n            return [...state, { id: uuid(), task: action.task, completed: false}];\n        case \"REMOVE\":\n            return state.filter(todo => todo.id !== action.id);\n        case \"TOGGLE\":\n            return state.map(todo => \n                todo.id === action.id ? {...todo, completed: !todo.completed} : todo);\n        case \"EDIT\":\n            return state.map(todo => \n                todo.id === action.id ? {...todo, task: action.newTask }: todo);\n        default:\n            return state;\n    }\n}\n\nexport default reducer;\n\n","//todos\n//all the methods to work with todos\nimport React, {createContext} from 'react';\nimport useLocalStorageReducer from '../hooks/useLocalStorageReducer';\nimport todoReducer from '../reducers/todo.reducer';\n\nconst defaultTodos = [\n    {id:1, task: \"Shopping\", completed: false},\n    {id:2, task: \"Walk the dog\", completed: true},\n];\n\nexport const TodosContext = createContext();\nexport const DispatchContext = createContext();\n\nexport function TodosProvider(props){\n    //const {todos, addTodo, removeTodo, toggleTodo, editTodo } = useTodoState(defaultTodos);\n    //is the same as below\n    const [todos, dispatch] = useLocalStorageReducer(\"todos\", defaultTodos, todoReducer);\n    //cause in Provider we need to pass as value 1 item - an object\n    return (\n        <TodosContext.Provider value = {todos}>\n            <DispatchContext.Provider value = {dispatch}>\n                {props.children}\n            </DispatchContext.Provider>    \n        </TodosContext.Provider>\n    )\n}\n","import {useState} from 'react';\n\nexport default initialVal => {\n    const [value, setValue] = useState(initialVal);\n    const handleChange = (e) =>{\n        setValue(e.target.value)\n    };\n    const reset = () =>{\n        setValue(\"\")\n    };\n    return [value, handleChange, reset];\n}","import React, {useContext} from 'react';\nimport useInputState from './hooks/useInputState';\nimport TextField from '@material-ui/core/TextField';\nimport {DispatchContext} from './contexts/todos.context';\n\nfunction EditTodoForm({ task, id, toggleEditForm}) {\n    const [value, handleChange, reset] = useInputState(task);\n    const dispatch = useContext(DispatchContext);\n    return (\n        <form onSubmit = {(e) =>{\n                e.preventDefault();\n                dispatch({type: \"EDIT\", id: id, newTask: value});\n                reset();\n                toggleEditForm();\n            }}\n            style = {{marginLeft: \"1rem\", width: \"50%\"  }}\n            >\n            <TextField margin = \"normal\" \n                value = {value} \n                onChange = {handleChange}\n                fullWidth\n                autoFocus/>\n        </form>\n        \n    );\n}\n\nexport default EditTodoForm;","import {useState} from 'react';\n\nfunction useToggle(initialVal = false) {\n    const [state, setState] = useState(initialVal);\n    const toggle = () => {\n        setState(!state)\n    };\n    return [state, toggle]\n}\n\nexport default useToggle;","import React, {useContext, memo} from 'react';\nimport EditTodoForm from './EditTodoForm';\nimport useToggleState from './hooks/useToggleState';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItem';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport IconButton from '@material-ui/core/IconButton';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport EditIcon from '@material-ui/icons/Edit';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport {DispatchContext} from './contexts/todos.context';\nimport { identifier } from '@babel/types';\n\n\nfunction Todo({task, completed, id}) {\n    const [isEditing, toggleEditing] = useToggleState(false);\n    const dispatch = useContext(DispatchContext);\n    return (\n        <ListItem style = {{height: \"64px\"}}>\n            {isEditing ? (<EditTodoForm id = {id} task = {task} toggleEditForm = {toggleEditing}/>) :\n                <>\n                    <Checkbox checked = {completed} onClick = {() => dispatch({type: \"TOGGLE\", id: id})}/>\n                    <ListItemText>\n                        {task}\n                    </ListItemText>\n                    <ListItemSecondaryAction>\n                        <IconButton aria-label = \"Delete\" onClick = {()=> dispatch({type: \"REMOVE\", id: id })} >\n                            <DeleteIcon/>\n                        </IconButton>\n                        <IconButton aria-label = \"Edit\" onClick = {toggleEditing}>\n                            <EditIcon/>\n                        </IconButton>\n                    </ListItemSecondaryAction>\n                </>}\n        </ListItem> \n    );\n}\n\nexport default memo(Todo);","import React, {useContext} from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport List from '@material-ui/core/List';\nimport Divider from '@material-ui/core/Divider';\nimport {TodosContext} from './contexts/todos.context';\n\nimport Todo from './Todo';\n\n\nfunction TodoList() {\n    const todos = useContext(TodosContext);\n    if (todos.length)\n        return (\n            <Paper>\n                <List>\n                    {todos.map((todo, i) =>(\n                        <>\n                            <Todo {...todo}/>\n                                {i < todos.length-1 && <Divider/>}\n                        \n                        </>\n                    ))}\n                </List>\n            \n            </Paper>\n        );\n        return null;\n}\n\nexport default TodoList;","import React, {useContext} from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Paper from '@material-ui/core/Paper';\nimport useInputState from './hooks/useInputState';\nimport { DispatchContext } from './contexts/todos.context';\n\n\nfunction TodoForm() {\n    const [value, handleChange, reset] = useInputState(\"\");\n    //const {dispatch} = useContext(DispatchContext); not with {} {dispatch}\n    //cause we remove {} from provider {{dispatch}}---> value={dispatch}\n    const dispatch = useContext(DispatchContext);\n    return (\n        <Paper style = {{margin: \"1rem 0\", padding: \"0 1rem\" }}>\n            <form onSubmit = {e => {\n                e.preventDefault();\n                dispatch({type: \"ADD\", task: value});\n                reset();\n                }}>\n                <TextField value = {value}\n                 onChange = {handleChange}\n                 margin = \"normal\"\n                 label = \"Add New Todo\"\n                 fullWidth/>     \n            </form>    \n        </Paper>\n    );\n}\n\nexport default TodoForm;","import React from \"react\";\nimport styled from \"styled-components\";\nimport Typography from '@material-ui/core/Typography';\n\nconst FooterContainer = styled.div`\n  text-align: center;\n  position: absolute;\n  bottom: 0;\n  width: 100% !important;\n  height: 40px;\n\n`;\n\nfunction Footer() {\n    return (\n      <FooterContainer>\n        <Typography variant=\"title\">Coded by Iryna Malankava</Typography>\n      </FooterContainer>\n    );\n}\n\n\nexport default Footer;","import React, {useEffect} from 'react';\nimport useTodoState from './hooks/useTodoState';\nimport TodoList from './TodoList';\nimport TodoForm from './TodoForm';\nimport Footer from './Footer';\nimport {TodosProvider} from './contexts/todos.context';\n\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport AppBar from '@material-ui/core/AppBar';\nimport Grid from '@material-ui/core/Grid';\n\nfunction TodoApp() {\n    \n    //const initialTodos = JSON.parse(window.localStorage.getItem(\"todos\")|| \"[]\");\n    /*const initialTodos = [\n        { id: 1, task: \"Walk\", completed: false},\n        { id: 2, task: \"Run\", completed: true},\n        { id: 3, task: \"Play\", completed: false},\n        \n    ];*/\n    \n    return (\n        <Paper\n            style = {{\n                padding: 0,\n                margin: 0,\n                height: \"100vh\",\n                backgroundColor: \"#fafafa\",\n\n            }}\n            elevation = {0}\n        >\n            <AppBar color='primary' position='static' style={{height: \"64px\"}}>\n                <Toolbar>\n                    <Typography color='inherit'>REACT TODOS APP</Typography>\n                </Toolbar>\n            </AppBar>\n            <Grid container justify = \"center\"\n                style = {{marginTop: \"1.5rem\"}}>\n                <Grid item xs = {11} md = {8} lg = {4}>\n                <TodosProvider>\n                    <TodoForm />\n                        <TodoList/>\n                    </TodosProvider>    \n                </Grid>\n                <Footer/>\n            </Grid>    \n        </Paper>\n    )\n}\n\nexport default TodoApp;","import React from 'react';\nimport TodoApp from './TodoApp.js';\n\n\nfunction App() {\n  return (\n    <TodoApp/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}